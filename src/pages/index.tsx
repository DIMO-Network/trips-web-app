import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import { useState } from "react";
import { useSignMessage } from 'wagmi'
import WalletConnectProvider from '@walletconnect/web3-provider';
import { ethers } from "ethers";



export default function Home() {
	const [, setIsNetworkSwitchHighlighted] =
		useState(false);
	const [, setIsConnectHighlighted] = useState(false);

	const closeAll = () => {
		setIsNetworkSwitchHighlighted(false);
		setIsConnectHighlighted(false);
	};
	const { signMessage } = useSignMessage()


	const fetchChallenge = async (address) => {
		try {
			const challengeResponse = await fetch('/auth/web3/generate_challenge', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
				},
				body: new URLSearchParams({
					client_id: 'client_id',
					domain: 'domain',
					scope: 'email',
					response_type: 'code',
					address: address,
				}),
			});

			// Check if the response is OK
			if (!challengeResponse.ok) {
				console.error('Response not OK, status:', challengeResponse.status);
				const text = await challengeResponse.text(); // Response as text for debugging
				console.error('Response text:', text);
				return;
			}

			const challenge = await challengeResponse.json();
			return challenge;
		} catch (error) {
			console.error('Error fetching challenge:', error);
		}
	};


	const onAccountConnected = async () => {
		try {
			if (!window.ethereum) {
				console.error("Ethereum wallet is not available");
				return;
			}

			await window.ethereum.request({ method: 'eth_requestAccounts' });
			const ethersProvider = new ethers.providers.Web3Provider(window.ethereum);
			const signer = ethersProvider.getSigner();
			const address = await signer.getAddress();

			const challenge = await fetchChallenge(address);
			if (challenge) {
				const signature = await signMessage({ message: challenge.nonce });
				// Process the signature here
				console.log('Signature:', signature);
			}
		} catch (error) {
			console.error('Error in onAccountConnected:', error);
		}
	};




	return (
		<>
			<Head>
				<title>WalletConnect | Next Starter Template</title>
				<meta name="description" content="Generated by create-wc-dapp" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<header>
				<div className={styles.header}>
					<div className={styles.logo}>
						<Image src="/logo.svg" alt="WalletConnect Logo" height="32" width="203" />
					</div>
				</div>
			</header>
			<main className={styles.main}>
				<div className={styles.wrapper}>
					<div className={styles.containerCentered}>
						<div onClick={closeAll} className={styles.highlight}>
							<w3m-button />
						</div>
						<div onClick={closeAll} className={styles.highlight}>
							<w3m-network-button />
						</div>
						<button onClick={onAccountConnected}>
							Sign Message
						</button>
					</div>
				</div>
			</main>
			<footer className={styles.footer}>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					strokeWidth={1.5}
					stroke="currentColor"
					height={16}
					width={16}
				>
				</svg>
				<a
					href="https://docs.walletconnect.com/web3modal/react/about?utm_source=next-starter-template&utm_medium=github&utm_campaign=next-starter-template"
					target="_blank"
					rel="noopener noreferrer"
				>
					Check out the full documentation here
				</a>
			</footer>
		</>
	);
}