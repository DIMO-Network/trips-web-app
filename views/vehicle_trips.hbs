<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Device Trips - {{TokenID}}</title>
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css" rel="stylesheet">
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/timeago.js@4.0.2/dist/timeago.min.js"></script>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f4f4f4;
      color: #333;
      margin: 0;
      padding: 20px;
    }
    h1 {
      color: #444444;
    }
    ul {
      list-style-type: none;
      padding: 0;
    }
    li {
      margin-bottom: 10px;
    }
    #map {
      height: 60vh;
      width: 80vw;
      margin-top: 20px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
    }
    .back-button {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }
    .back-button:hover {
      background-color: #367c39;
    }
  </style>
  <script>
    function displayTripDurations() {
      document.querySelectorAll('.trip-duration').forEach(function(element) {
        const start = new Date(element.getAttribute('data-start'));
        const end = new Date(element.getAttribute('data-end'));

        console.log('Parsed Start:', start.toISOString());
        console.log('Parsed End:', end.toISOString());

        const durationMs = end - start;
        const minutes = Math.floor(durationMs / 60000);
        element.textContent = `${minutes} minutes`;
      });
    }

    function updateTimeago() {
      document.querySelectorAll('.timeago').forEach(function(element) {
        const dateTime = element.getAttribute('datetime');
        element.textContent = timeago.format(dateTime);
      });
    }

    function formatDateTime() {
      document.querySelectorAll('.formatted-start-time, .formatted-end-time').forEach(function(element) {
        const dateTimeStr = element.getAttribute('data-time');
        const dateTime = new Date(dateTimeStr);

        const formattedTime = dateTime.toLocaleString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });

        element.textContent = formattedTime;
      });
    }

    window.addEventListener('load', function() {
      initializeMap();
      updateTimeago();
      displayTripDurations();
      formatDateTime();
    });

    function initializeMap() {
      mapboxgl.accessToken = "pk.eyJ1IjoiYmVua29jaGFub3dza2kiLCJhIjoiY2t6eDdlZzRnOGUyeTJvbXphdXdvZnJjZSJ9.S1WS1tkPKQnGt3A5Y72ZUA";
      window.map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/dark-v10',
        center: [0, 0],
        zoom: 9
      });
    }
    window.onload = initializeMap;

    async function fetchAndDisplayMap(tokenID, tripID, startTime, endTime) {
      const mapContainer = document.getElementById('map');
      mapContainer.style.display = 'block';

      if (!window.map) {
        console.log('Initializing map');
        window.map = new mapboxgl.Map({
          container: 'map',
          style: 'mapbox://styles/mapbox/dark-v10',
          center: [0, 0],
          zoom: 9
        });
      } else {
        window.map.resize();
      }

      try {
        const url = `/api/trip/${tripID}?start=${encodeURIComponent(startTime)}&end=${encodeURIComponent(endTime)}`;
        const response = await fetch(url, {
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
        });

        if (!response.ok) {
          throw new Error('Failed to fetch trip data');
        }
        const geoJSON = await response.json();
        console.log("GeoJSON data:", geoJSON);

        // Add data to map
        const addDataToMap = () => {
          if (!geoJSON || !geoJSON.features || !geoJSON.features.length || !geoJSON.features[0].geometry.coordinates.length) {
            console.error('Invalid GeoJSON data', geoJSON);
            alert("This trip doesn't have any location data to display.");

            return;
          }

          if (window.map.getSource('route')) {
            window.map.getSource('route').setData(geoJSON);
          } else {
            window.map.addSource('route', {
              type: 'geojson',
              data: geoJSON
            });
            window.map.addLayer({
              id: 'route',
              type: 'line',
              source: 'route',
              layout: {
                'line-join': 'round',
                'line-cap': 'round'
              },
              paint: {
                'line-color': '#FFFF00',
                'line-width': 6
              }
            });
          }

          const bounds = new mapboxgl.LngLatBounds();
          geoJSON.features[0].geometry.coordinates.forEach(coord => {
            if (coord.length >= 2) {
              bounds.extend(coord);
            }
          });

          if (!bounds.isEmpty()) {
            window.map.fitBounds(bounds, { padding: 20 });
          } else {
            console.error('Cannot calculate bounds from GeoJSON data');
          }
        };

        if (window.map.isStyleLoaded()) {
          addDataToMap();
        } else {
          window.map.once('load', addDataToMap);
        }
      } catch (error) {
        console.error('Error fetching trip data:', error);
      }
    }


  </script>
</head>
<body>
<h1>Trips for {{TokenID}}</h1>
<ul>
  {{#each Trips}}
    <li>
      Trip ID: {{this.ID}}
      <div>Start Time: <span class="formatted-start-time" data-time="{{this.Start.Time}}"></span></div>
      <div>End Time: <span class="formatted-end-time" data-time="{{this.End.Time}}"></span></div>
      <div>When: <span class="timeago" datetime="{{this.End.Time}}"></span></div>
      <div>Duration: <span class="trip-duration" data-start="{{this.Start.Time}}" data-end="{{this.End.Time}}"></span></div>
      <button onclick="fetchAndDisplayMap('{{../this.TokenID}}', '{{this.ID}}', '{{this.Start.Time}}', '{{this.End.Time}}')">View Map</button>
    </li>
  {{/each}}
</ul>
<div id="map"></div>
<button class="back-button" onclick="window.location.href='/vehicles/me'">Back to My Vehicles</button>
</body>
</html>
