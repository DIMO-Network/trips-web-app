<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Device Trips - {{TokenID}}</title>
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css" rel="stylesheet">
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/timeago.js@4.0.2/dist/timeago.min.js"></script>
  <style>
      body {
          font-family: 'Arial', sans-serif;
          background-color: #f4f4f4;
          color: #333;
          margin: 0;
          padding: 20px;
      }
      h1 {
          color: #444444;
      }
      .container {
          display: flex;
          flex-direction: column;
      }
      #map {
          height: 60vh;
          margin-bottom: 20px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
      }
      .trip-table {
          width: 100%;
          border-collapse: collapse;
      }
      .trip-table th, .trip-table td {
          border: 1px solid #ddd;
          padding: 8px;
      }
      .trip-table th {
          background-color: #6BC3C6;
          color: white;
      }
      .lighter-teal {
          background-color: #8ED6D9;
          color: white;
          border: none;
          border-radius: 5px;
          cursor: pointer;
          font-size: 16px;
          padding: 10px 20px;
      }
      .lighter-teal:hover {
          background-color: #6BC3C6;
      }
      .back-button {
          position: fixed;
          top: 20px;
          right: 20px;
          padding: 10px 20px;
          background-color: #00CED1;
          color: white;
          border: none;
          border-radius: 5px;
          cursor: pointer;
          font-size: 16px;
      }
      .back-button:hover {
          background-color: #00CED1;
      }
      .coordinates-table {
          margin-top: 20px;
          border-collapse: collapse;
          width: 100%;
          max-width: 600px;
          margin: auto;
      }
      .coordinates-table h3 {
          text-align: center;
          margin-bottom: 10px;
      }
      .coordinates-table table {
          width: 100%;
          border-collapse: collapse;
      }
      .coordinates-table th, .coordinates-table td {
          border: 1px solid #ddd;
          padding: 8px;
          text-align: left;
      }
      .coordinates-table th {
          background-color: #f2f2f2;
      }

  </style>
  <script>
      window.addEventListener('load', function() {
          initializeMap();
          updateTimeago();
          displayTripDurations();
          formatDateTime();

          const firstTripButton = document.querySelector('.trip-list li:first-child .lighter-teal');
          if (firstTripButton) {
              firstTripButton.click();
          }
      });

      function initializeMap() {
          mapboxgl.accessToken = "pk.eyJ1IjoiYmVua29jaGFub3dza2kiLCJhIjoiY2t6eDdlZzRnOGUyeTJvbXphdXdvZnJjZSJ9.S1WS1tkPKQnGt3A5Y72ZUA";
          window.map = new mapboxgl.Map({
              container: 'map',
              style: 'mapbox://styles/mapbox/dark-v10',
              center: [0, 0],
              zoom: 9
          });
      }
      window.onload = initializeMap;

      async function fetchAndDisplayMapWithGradient(tokenID, tripID, startTime, endTime, tripElement) {
          // Remove 'active-trip' class from all trip elements and add it to the current one
          document.querySelectorAll('.trip-list li').forEach(li => li.classList.remove('active-trip'));
          tripElement.classList.add('active-trip');

          const mapContainer = document.getElementById('map');
          mapContainer.style.display = 'block';

          if (!window.map) {
              console.log('Initializing map');
              window.map = new mapboxgl.Map({
                  container: 'map',
                  style: 'mapbox://styles/mapbox/dark-v10',
                  center: [0, 0],
                  zoom: 9
              });
          } else {
              window.map.resize();
          }

          try {
              const url = `/api/trip/${tripID}?start=${encodeURIComponent(startTime)}&end=${encodeURIComponent(endTime)}`;
              const response = await fetch(url, {
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  credentials: 'include',
              });

              if (!response.ok) {
                  throw new Error('Failed to fetch trip data');
              }

              const data = await response.json();
              if (!data || !data.geojson || !data.geojson.features || data.geojson.features.length === 0) {
                  console.error('Invalid or missing GeoJSON data', data);
                  alert("This trip doesn't have any location data to display.");
                  return;
              }

              const geoJSON = data.geojson;
              updateRouteLayerForSpeedGradient(geoJSON, data.speedGradient);

              // Fit map bounds to the GeoJSON data
              const bounds = new mapboxgl.LngLatBounds();
              geoJSON.features[0].geometry.coordinates.forEach(coord => {
                  bounds.extend(coord);
              });
              window.map.fitBounds(bounds, { padding: 20 });
          } catch (error) {
              console.error('Error fetching trip data:', error);
          }
      }

      function updateRouteLayerForSpeedGradient(geoJSON, speedGradient) {
          console.log('Speed Gradient Array:', speedGradient);

          let gradientStops = mapSpeedColorsToMapboxStyle(speedGradient);

          if (!window.map.getSource('route')) {
              window.map.addSource('route', {
                  type: 'geojson',
                  data: geoJSON,
                  lineMetrics: true
              });
          } else {
              window.map.getSource('route').setData(geoJSON);
          }

          if (window.map.getLayer('route')) {
              window.map.removeLayer('route');
          }

          window.map.addLayer({
              id: 'route',
              type: 'line',
              source: 'route',
              layout: {
                  'line-join': 'round',
                  'line-cap': 'round'
              },
              paint: {
                  'line-color': gradientStops,
                  'line-width': 6
              }
          });

          console.log('Added new route layer with gradient');
      }


      function mapSpeedColorsToMapboxStyle(speedColors) {
          let expression = ['interpolate', ['linear'], ['line-progress']];
          let totalColors = speedColors.length;

          for (let i = 0; i < totalColors; i++) {
              let stop = i / (totalColors - 1);
              let color = speedColors[i];
              expression.push(stop, color);
          }
          console.log('Gradient Stops:', expression);

          return expression;
      }

      function displayTripDurations() {
      document.querySelectorAll('.trip-duration').forEach(function(element) {
        const start = new Date(element.getAttribute('data-start'));
        const end = new Date(element.getAttribute('data-end'));

        console.log('Parsed Start:', start.toISOString());
        console.log('Parsed End:', end.toISOString());

        const durationMs = end - start;
        const minutes = Math.floor(durationMs / 60000);
        element.textContent = `${minutes} minutes`;
      });
    }

    function updateTimeago() {
      document.querySelectorAll('.timeago').forEach(function(element) {
        const dateTime = element.getAttribute('datetime');
        element.textContent = timeago.format(dateTime);
      });
    }

    function formatDateTime() {
      document.querySelectorAll('.formatted-start-time, .formatted-end-time').forEach(function(element) {
        const dateTimeStr = element.getAttribute('data-time');
        const dateTime = new Date(dateTimeStr);

        const formattedTime = dateTime.toLocaleString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });

        element.textContent = formattedTime;
      });
    }

    window.addEventListener('load', function() {
      initializeMap();
      updateTimeago();
      displayTripDurations();
      formatDateTime();
    });



      async function fetchAndDisplayMap(tokenID, tripID, startTime, endTime, tripElement, showCoords = false, tripIdForTable = '') {
          document.querySelectorAll('.trip-list li').forEach(li => li.classList.remove('active-trip'));
          tripElement.classList.add('active-trip');

          const mapContainer = document.getElementById('map');
          mapContainer.style.display = 'block';

          if (!window.map) {
              console.log('Initializing map');
              window.map = new mapboxgl.Map({
                  container: 'map',
                  style: 'mapbox://styles/mapbox/dark-v10',
                  center: [0, 0],
                  zoom: 9
              });
          } else {
              window.map.resize();
          }

          try {
              const url = `/api/trip/${tripID}?start=${encodeURIComponent(startTime)}&end=${encodeURIComponent(endTime)}`;
              const response = await fetch(url, {
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  credentials: 'include',
              });

              if (!response.ok) {
                  throw new Error('Failed to fetch trip data');
              }

              const data = await response.json();
              if (!data || !data.geojson || !data.geojson.features || data.geojson.features.length === 0) {
                  console.error('Invalid or missing GeoJSON data', data);
                  alert("This trip doesn't have any location data to display.");
                  return;
              }

              const geoJSON = data.geojson;

              // Check if the features have proper geometry and coordinates
              if (!geoJSON.features[0].geometry || !geoJSON.features[0].geometry.coordinates || geoJSON.features[0].geometry.coordinates.length === 0) {
                  console.error('GeoJSON feature geometry is not formatted correctly', geoJSON.features[0]);
                  return;
              }
              const startPointFeature = geoJSON.features[0];
              const endPointFeature = geoJSON.features[geoJSON.features.length - 1];

              const startPoint = startPointFeature.geometry.coordinates;
              const endPoint = endPointFeature.geometry.coordinates;

              // Make sure the coordinates are valid numbers
              if (!startPoint || startPoint.length !== 2 || !endPoint || endPoint.length !== 2) {
                  console.error('Start or end point is not a valid coordinate array');
                  return;
              }

              // Add start marker
              new mapboxgl.Marker({ color: 'green' })
                      .setLngLat({ lng: startPoint[0], lat: startPoint[1] }) // Make sure the order is [longitude, latitude]
                      .setPopup(new mapboxgl.Popup({ offset: 25 })
                              .setHTML(`<p><strong>Start Time:</strong> ${startPointFeature.properties.timestamp}</p>`))
                      .addTo(window.map);

              // Add end marker
              new mapboxgl.Marker({ color: 'red' })
                      .setLngLat({ lng: endPoint[0], lat: endPoint[1] }) // Make sure the order is [longitude, latitude]
                      .setPopup(new mapboxgl.Popup({ offset: 25 })
                              .setHTML(`<p><strong>End Time:</strong> ${endPointFeature.properties.timestamp}</p>`))
                      .addTo(window.map);

              if (!window.map.getSource('route')) {
                  window.map.addSource('route', {
                      type: 'geojson',
                      data: geoJSON
                  });
              } else {
                  window.map.getSource('route').setData(geoJSON);
              }

              if (window.map.getLayer('route')) {
                  window.map.removeLayer('route');
              }

              window.map.addLayer({
                  id: 'route',
                  type: 'line',
                  source: 'route',
                  layout: {
                      'line-join': 'round',
                      'line-cap': 'round'
                  },
                  paint: {
                      'line-color': 'black',
                      'line-width': 6
                  }
              });

              // Fit map bounds to the GeoJSON data
              const bounds = new mapboxgl.LngLatBounds();
              geoJSON.features.forEach(feature => {
                  const coordinates = feature.geometry.coordinates;
                  if (Array.isArray(coordinates) && coordinates.length === 2 && !isNaN(coordinates[0]) && !isNaN(coordinates[1])) {
                      bounds.extend(coordinates);
                  } else {
                      console.error('Invalid coordinates in feature:', feature);
                  }
              });

              if (!bounds.isEmpty()) {
                  window.map.fitBounds(bounds, { padding: 20 });
              } else {
                  console.error('Cannot calculate bounds from GeoJSON data');
              }

              if (showCoords) {
                  const existingTable = document.getElementById(`coords-table-${tripIdForTable}`);
                  if (existingTable) {
                      // Toggle visibility of the existing table
                      existingTable.style.display = existingTable.style.display === 'none' ? '' : 'none';
                  } else {
                      const geoJSON = data.geojson;
                      displayCoordinatesTable(geoJSON, tripIdForTable);
                  }
              }


          } catch (error) {
              console.error('Error fetching trip data:', error);
          }
      }


      function displayCoordinatesTable(geojson, tripIdForTable) {
          let tableHtml = `<div id="coords-table-${tripIdForTable}" class="coordinates-table">
                       <h3>Coordinates for Trip: ${tripIdForTable}</h3>
                       <table>
                         <tr>
                           <th>Latitude</th>
                           <th>Longitude</th>
                           <th>Speed</th>
                           <th>Timestamp</th>
                         </tr>`;

          geojson.features.forEach(feature => {
              const coord = feature.geometry.coordinates;
              const props = feature.properties;
              tableHtml += `<tr>
                        <td>${coord[1]}</td>
                        <td>${coord[0]}</td>
                        <td>${props.speed}</td>
                        <td>${props.timestamp}</td>
                      </tr>`;
          });

          tableHtml += '</table></div>';

          const mapContainer = document.getElementById('map');
          mapContainer.insertAdjacentHTML('afterend', tableHtml);
      }

      function convertToCSV(geojson) {
          if (!geojson || !geojson.features) {
              console.error('Invalid or undefined GeoJSON data');
              return 'Invalid data';
          }

          const headers = 'Latitude, Longitude, Speed, Timestamp\n';
          const rows = geojson.features.map(feature => {
              const coord = feature.geometry.coordinates;
              const props = feature.properties;
              const speed = props.speed || 'No speed data';
              const timestamp = props.timestamp || 'No timestamp data';
              return `${coord[1]}, ${coord[0]}, ${speed}, ${timestamp}`;
          }).join('\n');

          return headers + rows;
      }

      async function downloadTripDataAsCSV(tripId, startTime, endTime) {
          try {
              const url = `/api/trip/${tripId}?start=${encodeURIComponent(startTime)}&end=${encodeURIComponent(endTime)}`;
              const response = await fetch(url, {
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  credentials: 'include',
              });

              if (!response.ok) {
                  throw new Error('Failed to fetch trip data');
              }

              const data = await response.json();
              if (!data || !data.geojson) {
                  console.error('Invalid or missing GeoJSON data', data);
                  alert("No data available for download.");
                  return;
              }

              const csvContent = convertToCSV(data.geojson);
              downloadCSV(csvContent, `Trip_${tripId}.csv`);
          } catch (error) {
              console.error('Error downloading trip data:', error);
          }
      }


      function downloadCSV(csvContent, fileName) {
          const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          link.download = fileName;
          link.style.visibility = 'hidden';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
      }

  </script>
</head>
<body>
<div class="container">
    <div id="map"></div>
    <div>
        <h1>Trips for {{TokenID}}</h1>
        <table class="trip-table">
            <thead>
            <tr>
                <th>When</th>
                <th>Trip ID</th>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Duration</th>
                <th>Action</th>
            </tr>
            </thead>
            <tbody>
            {{#each Trips}}
                <tr>
                    <td><span class="timeago" datetime="{{this.End.Time}}"></span></td>
                    <td>{{this.ID}}</td>
                    <td><span class="formatted-start-time" data-time="{{this.Start.Time}}"></span></td>
                    <td><span class="formatted-end-time" data-time="{{this.End.Time}}"></span></td>
                    <td><span class="trip-duration" data-start="{{this.Start.Time}}" data-end="{{this.End.Time}}"></span></td>
                    <td>
                        <button class="lighter-teal" onclick="fetchAndDisplayMap('{{../this.TokenID}}', '{{this.ID}}', '{{this.Start.Time}}', '{{this.End.Time}}', this.parentNode)">View Trip</button>
                        <button class="lighter-teal" onclick="snapToRoad('{{this.ID}}')">Snap to Road</button>
                        <button class="lighter-teal" onclick="fetchAndDisplayMapWithGradient('{{this.TokenID}}', '{{this.ID}}', '{{this.Start.Time}}', '{{this.End.Time}}', this.parentNode)">Show Speed Gradient</button>
                        <button class="lighter-teal" onclick="fetchAndDisplayMap('{{../this.TokenID}}', '{{this.ID}}', '{{this.Start.Time}}', '{{this.End.Time}}', this.parentNode, true, '{{this.ID}}')">Show Coordinates</button>
                        <button class="lighter-teal" onclick="downloadTripDataAsCSV('{{this.ID}}', '{{this.Start.Time}}', '{{this.End.Time}}')">Download as CSV</button>

                    </td>
                </tr>
            {{/each}}
            </tbody>
        </table>
    </div>
    <button class="back-button" onclick="window.location.href='/vehicles/me'">Back to My Vehicles</button>
</div>
</body>
</html>
